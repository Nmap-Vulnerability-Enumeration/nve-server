import json
import utils

from device import Device, DeviceEncoder


class Vulnerability:
    def __init__(self,
                 cve_id: str,
                 published: str = None,
                 patched: bool = None,          # patch status
                 configurations: list = None,
                 impact=None
                 ):
        self.cve_id = cve_id
        self.published_date = published
        self.patched = patched
        self.configs = configurations
        self.impact = impact

    @staticmethod
    def from_nist(entry):
        if len(entry) == 0:
            raise ValueError("_dict cannot be empty")

        cve_id = entry["cve"]["CVE_data_meta"]["ID"]
        published = entry["publishedDate"] if "publishedDate" in entry else None
        description = None
        impact = entry["impact"] if "impact" in entry else None

        # get description
        for description_data in entry["cve"]["description"]["description_data"]:
            if description_data["lang"] == "en":
                description = description_data["value"]
                break

        configs = entry["configurations"] if "configurations" in entry else None

        return Vulnerability(
            cve_id,
            published=published,
            patched=None,
            configurations=configs,
            impact=impact
        )

    def applicable_to(self, cpe_list):
        if self.configs == None or "nodes" not in self.configs:
            return False

        return utils.is_vulnerable(cpe_list, self.configs["nodes"])

    def is_vulnerable(self, device: Device):
        if self.configs == None or "nodes" not in self.configs:
            return False

        cpe_list = device.get_all_cpes()
        config_node = self.configs["nodes"]

        return self._is_vuln_helper(config_node, cpe_list)

    def _is_vuln_helper(self, config_node, cpe_list):
        if len(cpe_list) == 0:
            return False

        and_node = config_node["operator"] == "AND" if "operator" in config_node else False
        negate = config_node["negate"] if "negate" in config_node else False
        return_val = None

        if "cpe_match" in config_node:
            for match in config_node:
                cpe_found = utils.cpe_in_list(match["cpe23Uri"], cpe_list)
                if cpe_found and not and_node:  # if cpe found and its an or node
                    return_val = True
                    break
                elif (not cpe_found) and and_node:  # if cpe not found and its an and node
                    return_val = False
                    break
            if return_val == None:
                return_val = and_node  # if its an and node, return true; otherwise return false

        elif "children" in config_node:
            for child in config_node["children"]:
                is_vuln = self._is_vuln_helper(config_node, child)
                if is_vuln and not and_node:
                    return_val = True
                    break
                elif (not is_vuln) and and_node:
                    return_val = False
                    break
            if return_val == None:
                return_val = and_node

        else:
            raise ValueError("Node needs children or cpe_match")

        return return_val if negate == False else (not return_val)

    def enumerate_vuln_configs(self):
        configs = []
        pass


class VulnerabilityEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Vulnerability):
            return {
                "_type": "vuln",
                "value": {
                    "cve": o.cve_id,
                    "published": o.published_date,
                    "patched": o.patched,
                    "configs": o.configs,
                    "impact": o.impact
                }
            }

        else:
            return super().default(o)
