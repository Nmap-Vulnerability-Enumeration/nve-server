import json

from device import DeviceEncoder

class Vulnerability:
    def __init__(self,
                 cve_id: str,
                #  affected_service: str = None,  # name of the affected service
                #  affected_devices: dict = None, # {key:value} = {ip:list-of-affected-ports}
                 published: str = None,
                 patched: bool = None,          # patch status
                 configurations: list = None,
                 impact = None
                 ):
        self.cve_id = cve_id
        # self.affected_service = affected_service
        # self.affected_devices = dict() if affected_devices == None else affected_devices
        self.published_date = published
        self.patched = patched
        self.configurations = configurations
        self.impact = impact

    @staticmethod
    def from_nist(entry):
        if len(entry) == 0:
            raise ValueError("_dict cannot be empty")
        
        cve_id = entry["cve"]["CVE_data_meta"]["ID"]
        published = entry["publishedDate"] if "publishedDate" in entry else None
        description = None
        configs = []
        impact = entry["impact"] if "impact" in entry else None

        # get description
        for description_data in entry["cve"]["description"]["description_data"]:
            if description_data["lang"] == "en":
                description = description_data["value"]
                break
        
        # get configurations
        if "configurations" in entry and \
            "nodes" in entry["configurations"]:
            
            for node in entry["configurations"]["nodes"]:
                if "cpe_match" in node:        
                    for cpe_match in node["cpe_match"]:
                        if cpe_match["vulnerable"]:
                            configs.append(cpe_match["cpe23Uri"])

        return Vulnerability(
            cve_id,
            published=published,
            patched=None,
            configurations = configs,
            impact = impact
        )

        

class VulnerabilityEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Vulnerability):
            return {
                "_type": "vuln",
                "value": {
                    "cve": o.cve_id,
                    # "affected_service": o.affected_service,
                    # "affected_devices": o.affected_devices,
                    "published": o.published_date,
                    "patched": o.patched,
                    "configs": o.configurations,
                    "impact": o.impact
                }
            }

        else:
            return super().default(o)